{"ast":null,"code":"var _jsxFileName = \"/Users/abraham/fun/gcksmint/src/MintButton.tsx\",\n    _s = $RefreshSig$();\n\nimport styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\nimport { CircularProgress } from '@material-ui/core';\nimport { GatewayStatus, useGateway } from '@civic/solana-gateway-react';\nimport { useEffect, useState } from 'react';\nimport { whitelistSettings, publicSaleSettings, mintPanic } from './userSettings';\nimport { toDate } from './utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CTAButton = styled(Button)`\n  \n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n`; // add your styles here\n\n_c = CTAButton;\nexport const MintButton = _ref => {\n  _s();\n\n  var _toDate, _toDate2, _toDate3, _toDate4;\n\n  let {\n    onMint,\n    candyMachine,\n    isMinting\n  } = _ref;\n  const {\n    requestGatewayToken,\n    gatewayStatus\n  } = useGateway();\n  const [clicked, setClicked] = useState(false);\n  const whitelistStartDate = (_toDate = toDate(whitelistSettings.startDate)) === null || _toDate === void 0 ? void 0 : _toDate.getTime();\n  const whitelistEndDate = (_toDate2 = toDate(whitelistSettings.endDate)) === null || _toDate2 === void 0 ? void 0 : _toDate2.getTime();\n  const publicMintStart = (_toDate3 = toDate(publicSaleSettings.startDate)) === null || _toDate3 === void 0 ? void 0 : _toDate3.getTime();\n  const publicMintEnd = (_toDate4 = toDate(publicSaleSettings.endDate)) === null || _toDate4 === void 0 ? void 0 : _toDate4.getTime();\n\n  function whiteListSaleCheck() {\n    if (whitelistSettings.enabled && whitelistStartDate && whitelistEndDate && Date.now() > whitelistStartDate && Date.now() < whitelistEndDate) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  let WhitelistMintActive = whiteListSaleCheck();\n  console.log('is Whitelist Sale Active? ' + whiteListSaleCheck());\n\n  function publicSaleCheck() {\n    if (publicMintStart && publicMintEnd) {\n      if (Date.now() > publicMintStart && Date.now() < publicMintEnd) {\n        return true;\n      } else {\n        return false;\n      }\n    } else if (publicMintStart) {\n      if (Date.now() > publicMintStart) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }\n\n  let PublicMintActive = publicSaleCheck();\n  console.log('is public sale live? ' + publicSaleCheck());\n  console.log(candyMachine === null || candyMachine === void 0 ? void 0 : candyMachine.state.isSoldOut, isMinting, WhitelistMintActive || PublicMintActive, !(candyMachine !== null && candyMachine !== void 0 && candyMachine.state.isActive));\n  useEffect(() => {\n    if (gatewayStatus === GatewayStatus.ACTIVE && clicked) {\n      console.log('Minting');\n      onMint();\n      setClicked(false);\n    }\n  }, [gatewayStatus, clicked, setClicked, onMint]);\n  return /*#__PURE__*/_jsxDEV(CTAButton, {\n    className: \"minting-button\",\n    disabled: (candyMachine === null || candyMachine === void 0 ? void 0 : candyMachine.state.isSoldOut) || isMinting || mintPanic.enabled || !(WhitelistMintActive || PublicMintActive),\n    onClick: async () => {\n      setClicked(true);\n\n      if (candyMachine !== null && candyMachine !== void 0 && candyMachine.state.isActive && candyMachine !== null && candyMachine !== void 0 && candyMachine.state.gatekeeper) {\n        console.log('gatekeeper active');\n\n        if (gatewayStatus === GatewayStatus.ACTIVE) {\n          console.log(gatewayStatus + GatewayStatus.ACTIVE);\n          setClicked(true);\n        } else {\n          console.log('requeting token');\n          let token = await requestGatewayToken();\n          console.log(token);\n        }\n      } else {\n        await onMint();\n        setClicked(false);\n      }\n    },\n    variant: \"contained\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mint-button-text\",\n      children: candyMachine !== null && candyMachine !== void 0 && candyMachine.state.isSoldOut ? 'SOLD OUT' : isMinting ? /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this) : mintPanic.enabled ? 'Mint Paused' : 'MINT'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MintButton, \"C4iCClLy0038vDkrez1VZOKsNPU=\", false, function () {\n  return [useGateway];\n});\n\n_c2 = MintButton;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CTAButton\");\n$RefreshReg$(_c2, \"MintButton\");","map":{"version":3,"sources":["/Users/abraham/fun/gcksmint/src/MintButton.tsx"],"names":["styled","Button","CircularProgress","GatewayStatus","useGateway","useEffect","useState","whitelistSettings","publicSaleSettings","mintPanic","toDate","CTAButton","MintButton","onMint","candyMachine","isMinting","requestGatewayToken","gatewayStatus","clicked","setClicked","whitelistStartDate","startDate","getTime","whitelistEndDate","endDate","publicMintStart","publicMintEnd","whiteListSaleCheck","enabled","Date","now","WhitelistMintActive","console","log","publicSaleCheck","PublicMintActive","state","isSoldOut","isActive","ACTIVE","gatekeeper","token"],"mappings":"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","sourcesContent":["import styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\nimport { CandyMachineAccount } from './candy-machine';\n\nimport { CircularProgress } from '@material-ui/core';\nimport { GatewayStatus, useGateway } from '@civic/solana-gateway-react';\nimport { useEffect, useState } from 'react';\nimport { whitelistSettings, publicSaleSettings, mintPanic } from './userSettings';\nimport { toDate }  from './utils'\n\n\nexport const CTAButton = styled(Button)`\n  \n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n`; // add your styles here\n\nexport const MintButton = ({\n  onMint,\n  candyMachine,\n  \n  isMinting,\n  \n  \n}: {\n  onMint: () => Promise<void>;\n  candyMachine: CandyMachineAccount | undefined;\n  \n  isMinting: boolean;\n \n}) => {\n  const { requestGatewayToken, gatewayStatus } = useGateway();\n  const [clicked, setClicked] = useState(false);\n  const whitelistStartDate = toDate(whitelistSettings.startDate)?.getTime();\n  const whitelistEndDate = toDate(whitelistSettings.endDate)?.getTime();\n  const publicMintStart = toDate(publicSaleSettings.startDate)?.getTime();\n  const publicMintEnd = toDate(publicSaleSettings.endDate)?.getTime();\n\n  function whiteListSaleCheck() {\n    if (whitelistSettings.enabled && (whitelistStartDate && whitelistEndDate ) && Date.now() > whitelistStartDate && Date.now() < whitelistEndDate) {\n      \n      return true\n    } else {\n      \n      return false\n    }\n  }\n  \n  let WhitelistMintActive = whiteListSaleCheck()\n  console.log('is Whitelist Sale Active? ' + whiteListSaleCheck())\n\n  function publicSaleCheck() {\n\n    if (publicMintStart && publicMintEnd){\n      if(Date.now() > publicMintStart && Date.now() < publicMintEnd){\n        return true\n      } else {\n        return false\n      }\n    }\n    else if (publicMintStart) {\n      if (Date.now() > publicMintStart){\n        return true\n      } else {\n        return false\n      }\n    \n    }\n\n\n  }\n\n  let PublicMintActive = publicSaleCheck()\n\n  console.log('is public sale live? '+ publicSaleCheck())\n  \n  console.log(candyMachine?.state.isSoldOut, isMinting, (WhitelistMintActive || PublicMintActive) ,!candyMachine?.state.isActive)\n\n  useEffect(() => {\n    if (gatewayStatus === GatewayStatus.ACTIVE && clicked) {\n      console.log('Minting');\n      onMint();\n      setClicked(false);\n    }\n  }, [gatewayStatus, clicked, setClicked, onMint]);\n  return (\n    <CTAButton\n      className='minting-button'\n      disabled={\n        candyMachine?.state.isSoldOut ||\n        isMinting ||\n        mintPanic.enabled ||\n        !(WhitelistMintActive || PublicMintActive)\n        \n\n      }\n      onClick={async () => {\n        setClicked(true);\n        if (candyMachine?.state.isActive && candyMachine?.state.gatekeeper) {\n          console.log('gatekeeper active')\n          if (gatewayStatus === GatewayStatus.ACTIVE) {\n            console.log(gatewayStatus + GatewayStatus.ACTIVE)\n            setClicked(true);\n          } else {\n            console.log('requeting token')\n             let token = await requestGatewayToken();\n            console.log(token);\n          }\n        } else {\n          await onMint();\n          setClicked(false);\n        }\n      }}\n      variant=\"contained\"\n    >\n      <div className='mint-button-text'>\n      {candyMachine?.state.isSoldOut ? (\n        'SOLD OUT'\n      ) : isMinting ? (\n        <CircularProgress />\n      \n      ) : mintPanic.enabled ? (\n\n        'Mint Paused'\n\n      ) :  (\n        'MINT'\n      )}\n      </div>\n    </CTAButton>\n  );\n};"]},"metadata":{},"sourceType":"module"}