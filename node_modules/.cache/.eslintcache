[{"/Users/abraham/fun/gcksmint/src/index.tsx":"1","/Users/abraham/fun/gcksmint/src/reportWebVitals.ts":"2","/Users/abraham/fun/gcksmint/src/App.tsx":"3","/Users/abraham/fun/gcksmint/src/Minter.tsx":"4","/Users/abraham/fun/gcksmint/src/candy-machine.ts":"5","/Users/abraham/fun/gcksmint/src/PhaseHeader.tsx":"6","/Users/abraham/fun/gcksmint/src/MintButton.tsx":"7","/Users/abraham/fun/gcksmint/src/userSettings.tsx":"8","/Users/abraham/fun/gcksmint/src/utils.ts":"9","/Users/abraham/fun/gcksmint/src/countdown.tsx":"10","/Users/abraham/fun/gcksmint/src/connection.tsx":"11","/Users/abraham/fun/gcksmint/src/geckomponents/Main.js":"12","/Users/abraham/fun/gcksmint/src/geckomponents/Footer.js":"13"},{"size":502,"mtime":1641429830013,"results":"14","hashOfConfig":"15"},{"size":425,"mtime":1641429830014,"results":"16","hashOfConfig":"15"},{"size":2094,"mtime":1641567914389,"results":"17","hashOfConfig":"15"},{"size":12181,"mtime":1641572609047,"results":"18","hashOfConfig":"15"},{"size":12718,"mtime":1641429830013,"results":"19","hashOfConfig":"15"},{"size":4216,"mtime":1641429830013,"results":"20","hashOfConfig":"15"},{"size":3831,"mtime":1641572125670,"results":"21","hashOfConfig":"15"},{"size":4189,"mtime":1641429830014,"results":"22","hashOfConfig":"15"},{"size":4112,"mtime":1641429830014,"results":"23","hashOfConfig":"15"},{"size":3220,"mtime":1641429830013,"results":"24","hashOfConfig":"15"},{"size":14559,"mtime":1641429830013,"results":"25","hashOfConfig":"15"},{"size":4943,"mtime":1641436150393,"results":"26","hashOfConfig":"15"},{"size":1617,"mtime":1641436442630,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1tpfnoy",{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},"/Users/abraham/fun/gcksmint/src/index.tsx",[],["58","59"],"/Users/abraham/fun/gcksmint/src/reportWebVitals.ts",[],"/Users/abraham/fun/gcksmint/src/App.tsx",[],"/Users/abraham/fun/gcksmint/src/Minter.tsx",["60","61","62","63"],"import { useEffect, useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport { Container, Snackbar } from '@material-ui/core'\nimport Paper from '@material-ui/core/Paper'\nimport Grid from '@material-ui/core/Grid'\nimport Alert from '@material-ui/lab/Alert'\n\nimport * as anchor from '@project-serum/anchor'\n\nimport { PublicKey } from '@solana/web3.js'\n\nimport { useWallet } from '@solana/wallet-adapter-react'\nimport { WalletDialogButton } from '@solana/wallet-adapter-material-ui'\n\nimport {\n  awaitTransactionSignatureConfirmation,\n  CandyMachineAccount,\n  CANDY_MACHINE_PROGRAM,\n  getCandyMachineState,\n  mintOneToken,\n} from './candy-machine'\n\nimport { AlertState } from './utils'\nimport { MintButton } from './MintButton'\nimport { getPhase, Phase, PhaseHeader } from './PhaseHeader'\nimport { GatewayProvider } from '@civic/solana-gateway-react'\nimport {\n  whitelistSettings,\n  publicSaleSettings,\n  welcomeSettings,\n  MintWelcomeCustomHTML,\n  MintWhitelistCustomHTML,\n  MintPublicSaleCustomHTML,\n} from './userSettings'\nimport FadeBorder from './geckomponents/fade-border.png'\n\nconst ConnectButton = styled(WalletDialogButton)`\n  margin: 1rem auto !important;\n  width: 200px;\n  height: 60px;\n  background-image: url(${FadeBorder});\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n`\n\nconst MintContainer = styled.div`\n  width: 300px;\n  margin: 2rem auto;\n  display: flex;\n  justify-content: center;\n` // add your styles here\n\nconst Text = styled.span`\n  font-family: 'Poppins-Regular';\n  color: black;\n  font-size: 1.5rem;\n`\n\nconst BoldText = styled.span`\n  font-family: 'Poppins-Bold';\n  color: black;\n  font-size: 5rem;\n  text-align: center;\n  text-transform: uppercase;\n`\n\nexport interface HomeProps {\n  candyMachineId?: anchor.web3.PublicKey\n\n  connection: anchor.web3.Connection\n  startDate: number\n  txTimeout: number\n  rpcHost: string\n}\n\nconst Home = (props: HomeProps) => {\n  // const [yourSOLBalance, setYourSOLBalance] = useState<number | null>(null);\n  const rpcUrl = props.rpcHost\n  const [whiteListTokenBalance, setWhiteListTokenBalance] = useState<number>(0)\n  const [isMinting, setIsMinting] = useState(false) // true when user got to press MINT\n  const [mintingTotal, setMintingTotal] = useState<number | null>(null)\n  const [itemsAvailable, setItemsAvailable] = useState<number | null>(null)\n  const [publicKey, setPublicKey] = useState<PublicKey>()\n\n  const [candyMachine, setCandyMachine] = useState<CandyMachineAccount>()\n\n  const [price, setPrice] = useState<number | null>(null)\n\n  const wallet = useWallet()\n\n  const anchorWallet = useMemo(() => {\n    if (\n      !wallet ||\n      !wallet.publicKey ||\n      !wallet.signAllTransactions ||\n      !wallet.signTransaction\n    ) {\n      return\n    }\n\n    return {\n      publicKey: wallet.publicKey,\n      signAllTransactions: wallet.signAllTransactions,\n      signTransaction: wallet.signTransaction,\n    } as anchor.Wallet\n  }, [wallet])\n\n  const [alertState, setAlertState] = useState<AlertState>({\n    open: false,\n    message: '',\n    severity: undefined,\n  })\n\n  const onMint = async () => {\n    try {\n      setIsMinting(true)\n      document.getElementById('#identity')?.click()\n      if (wallet.connected && candyMachine?.program && wallet.publicKey) {\n        const mintTxId = (await mintOneToken(candyMachine, wallet.publicKey))[0]\n\n        let status: any = { err: true }\n        if (mintTxId) {\n          status = await awaitTransactionSignatureConfirmation(\n            mintTxId,\n            props.txTimeout,\n            props.connection,\n            'singleGossip',\n            true,\n          )\n        }\n\n        if (!status?.err) {\n          setAlertState({\n            open: true,\n            message: 'Congratulations! Mint succeeded!',\n            severity: 'success',\n          })\n\n          setMintingTotal(mintingTotal! + 1)\n\n          if (whiteListTokenBalance && whiteListTokenBalance > 0)\n            setWhiteListTokenBalance(whiteListTokenBalance - 1)\n        } else {\n          setAlertState({\n            open: true,\n            message: 'Mint failed! Please try again!',\n            severity: 'error',\n          })\n        }\n      }\n    } catch (error: any) {\n      // TODO: blech:\n      let message = error.msg || 'Minting failed! Please try again!'\n      if (!error.msg) {\n        if (!error.message) {\n          message = 'Transaction Timeout! Please try again.'\n        } else if (error.message.indexOf('0x138')) {\n        } else if (error.message.indexOf('0x137')) {\n          message = `SOLD OUT!`\n        } else if (error.message.indexOf('0x135')) {\n          message = `Insufficient funds to mint. Please fund your wallet.`\n        }\n      } else {\n        if (error.code === 311) {\n          message = `SOLD OUT!`\n          window.location.reload()\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`\n        }\n      }\n\n      setAlertState({\n        open: true,\n        message,\n        severity: 'error',\n      })\n    } finally {\n      setIsMinting(false)\n    }\n  }\n\n  useEffect(() => {\n    ;(async () => {\n      if (!anchorWallet) {\n        console.log('anchor wallet not found')\n        return\n      }\n      console.log('wallet connected')\n      if (anchorWallet.publicKey) {\n        setPublicKey(anchorWallet.publicKey)\n      }\n\n      // try {\n      //   const balance = await props.connection.getBalance(\n      //     anchorWallet.publicKey\n      //   );\n      //   console.log(\"Sol balance is: \" + balance);\n      //   setYourSOLBalance(balance);\n      // } catch (e) {\n      //   console.log(\"Problem getting fair launch state\");\n      //   console.log(e);\n      // }\n\n      if (props.candyMachineId) {\n        try {\n          const cndy = await getCandyMachineState(\n            anchorWallet,\n            props.candyMachineId,\n            props.connection,\n          )\n          await setCandyMachine(cndy)\n        } catch (e) {\n          console.log('Problem getting candy machine state')\n          console.log(e)\n        }\n      } else {\n        console.log('No candy machine detected in configuration.')\n      }\n    })()\n  }, [anchorWallet, props.candyMachineId, props.connection])\n\n  useEffect(() => {\n    async function getTokenAmount() {\n      if (publicKey && candyMachine?.state.whitelistMintSettings?.mint) {\n        try {\n          var tokenAmount =\n            await props.connection.getParsedTokenAccountsByOwner(publicKey, {\n              mint: candyMachine?.state.whitelistMintSettings?.mint,\n            })\n          setWhiteListTokenBalance(\n            tokenAmount.value[0].account.data.parsed.info.tokenAmount.amount,\n          )\n        } catch {\n          setWhiteListTokenBalance(0)\n        }\n      }\n    }\n\n    getTokenAmount()\n\n    if (candyMachine?.state.itemsAvailable) {\n      setItemsAvailable(candyMachine?.state.itemsAvailable)\n    }\n\n    if (candyMachine?.state.itemsRedeemed == null) {\n      setMintingTotal(0)\n    } else {\n      setMintingTotal(candyMachine?.state.itemsRedeemed)\n    }\n\n    if (candyMachine?.state.price) {\n      setPrice(candyMachine?.state.price.toNumber() / 1000000000)\n    }\n  }, [candyMachine, publicKey, props.connection])\n\n  const phase = getPhase(candyMachine)\n  console.log({ phase })\n\n  const getSaleText = () => {\n    if (!price) {\n      return 'Fetching...'\n    }\n\n    if (price == 0.5) {\n      return 'Public sale'\n    }\n\n    return 'Presale for OGs, thank you!'\n  }\n\n  const getMintedText = () => {\n    //mintingTotal + ' out of ' + itemsAvailable\n    if (!price || !mintingTotal || !itemsAvailable) return null\n\n    if (price == 0.3) {\n      return `${100 - mintingTotal} out of 100 available`\n    }\n\n    return `${itemsAvailable - mintingTotal} out of ${itemsAvailable} available`\n  }\n\n  return (\n    <Container>\n      <Container maxWidth=\"md\">\n        <div>\n          {phase === Phase.Welcome && welcomeSettings.enableCustomHTML && (\n            <MintWelcomeCustomHTML />\n          )}\n          {phase === Phase.WhiteListMint &&\n            whitelistSettings.enableCustomHTML && <MintWhitelistCustomHTML />}\n          {phase === Phase.PublicMint &&\n            publicSaleSettings.enableCustomHTML && <MintPublicSaleCustomHTML />}\n\n          {(phase === Phase.PublicMint || Phase.WhiteListMint) && (\n            <>\n              {phase === Phase.WhiteListMint && (\n                <div className=\" text-center\">\n                  {whiteListTokenBalance >= 0 ? (\n                    <h1>{whiteListTokenBalance}</h1>\n                  ) : (\n                    <div className=\"loading\"></div>\n                  )}\n\n                  <div>\n                    <p>Mints to Claim</p>\n                  </div>\n                </div>\n              )}\n              <BoldText>{getSaleText()}</BoldText>\n              <Grid\n                container\n                justifyContent=\"space-between\"\n                color=\"textSecondary\"\n              >\n                <div className=\"test-stat\">\n                  {(phase === Phase.WhiteListMint ||\n                    phase === Phase.PublicMint) &&\n                    (itemsAvailable !== null && mintingTotal !== null ? (\n                      <Text>{getMintedText()}</Text>\n                    ) : (\n                      <p className=\"loading\"></p>\n                    ))}\n                </div>\n\n                <div className=\"text-end\">\n                  {(phase === Phase.Welcome && welcomeSettings.showPrice) ||\n                  phase === Phase.WhiteListMint ||\n                  phase === Phase.PublicMint ? (\n                    <>\n                      {price ? (\n                        <Text>Price: {price} Sol</Text>\n                      ) : (\n                        <p className=\"loading\"></p>\n                      )}\n                    </>\n                  ) : (\n                    ''\n                  )}\n\n                  {/* {formatSol(yourSOLBalance || 0).toLocaleString()} SOL */}\n                </div>\n              </Grid>\n\n              {!wallet.connected ? (\n                <MintContainer>\n                  <ConnectButton>Connect{''}</ConnectButton>\n                </MintContainer>\n              ) : (\n                <MintContainer>\n                  {candyMachine?.state.isActive &&\n                  candyMachine?.state.gatekeeper &&\n                  wallet.publicKey &&\n                  wallet.signTransaction ? (\n                    <GatewayProvider\n                      wallet={{\n                        publicKey:\n                          wallet.publicKey ||\n                          new PublicKey(CANDY_MACHINE_PROGRAM),\n                        //@ts-ignore\n                        signTransaction: wallet.signTransaction,\n                      }}\n                      // // Replace with following when added\n                      // gatekeeperNetwork={candyMachine.state.gatekeeper_network}\n                      gatekeeperNetwork={\n                        candyMachine?.state?.gatekeeper?.gatekeeperNetwork\n                      } // This is the ignite (captcha) network\n                      /// Don't need this for mainnet\n                      clusterUrl={rpcUrl}\n                      options={{ autoShowModal: false }}\n                    >\n                      <MintButton\n                        candyMachine={candyMachine}\n                        isMinting={isMinting}\n                        onMint={onMint}\n                      />\n                    </GatewayProvider>\n                  ) : (\n                    <MintButton\n                      candyMachine={candyMachine}\n                      isMinting={isMinting}\n                      onMint={onMint}\n                    />\n                  )}\n                </MintContainer>\n              )}\n            </>\n          )}\n        </div>\n      </Container>\n\n      <Snackbar\n        open={alertState.open}\n        autoHideDuration={6000}\n        onClose={() => setAlertState({ ...alertState, open: false })}\n      >\n        <Alert\n          onClose={() => setAlertState({ ...alertState, open: false })}\n          severity={alertState.severity}\n        >\n          {alertState.message}\n        </Alert>\n      </Snackbar>\n    </Container>\n  )\n}\n\nexport default Home\n","/Users/abraham/fun/gcksmint/src/candy-machine.ts",[],"/Users/abraham/fun/gcksmint/src/PhaseHeader.tsx",[],"/Users/abraham/fun/gcksmint/src/MintButton.tsx",[],"/Users/abraham/fun/gcksmint/src/userSettings.tsx",[],"/Users/abraham/fun/gcksmint/src/utils.ts",[],"/Users/abraham/fun/gcksmint/src/countdown.tsx",[],"/Users/abraham/fun/gcksmint/src/connection.tsx",[],"/Users/abraham/fun/gcksmint/src/geckomponents/Main.js",["64","65","66","67","68"],"import React from 'react'\nimport styled, { css } from 'styled-components'\n\nimport { Footer } from './Footer'\n\nimport Gecko from './gecko.png'\nimport BannerLogo from './banner-logo.png'\n\nconst size = {\n  xs: '375px',\n  sm: '768px',\n  lg: '1200px',\n}\n\nconst device = {\n  xs: `(max-width: ${size.xs})`,\n  sm: `(max-width: ${size.sm})`,\n  lg: `(max-width: ${size.lg})`,\n}\n\nconst NavLink = styled.a`\n  font-size: 2rem;\n  font-family: 'Poppins-Bold';\n  color: white;\n  text-transform: uppercase;\n\n  @media screen and ${device.sm} {\n    font-size: 1.8rem;\n    margin: 0 1rem;\n  }\n`\n\nconst NavWrapper = styled.nav`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  cursor: pointer;\n\n  @media screen and ${device.sm} {\n    width: 100%;\n    flex-wrap: wrap;\n    justify-content: center;\n    margin: 0;\n  }\n`\n\nconst NavSeparator = styled.div`\n  width: 5px;\n  height: 30px;\n  background-image: url('/fade-border.png');\n  background-size: contain;\n  margin: 0 2rem;\n\n  @media screen and ${device.sm} {\n    display: none;\n  }\n\n  @media screen and ${device.xs} {\n    display: none;\n  }\n`\n\nconst Nav = () => {\n  return (\n    <NavWrapper>\n      <NavLink data-atropos-offset=\"16\">Litepaper</NavLink>\n      <NavSeparator />\n\n      <NavSeparator />\n\n      <NavSeparator />\n      <NavLink data-atropos-offset=\"16\">Team</NavLink>\n    </NavWrapper>\n  )\n}\n\nconst BannerWrapper = styled.section`\n  width: 100%;\n  background: rgb(113, 24, 33);\n  background: radial-gradient(\n    circle,\n    rgba(113, 24, 33, 1) 0%,\n    rgba(20, 2, 6, 1) 100%\n  );\n  padding: 1.5rem 0;\n  display: flex;\n  flex-direction: column;\n\n  flex-wrap: wrap;\n\n  span {\n    font-size: 3rem;\n    color: white;\n  }\n\n  @media screen and ${device.sm} {\n    padding: 1rem 0;\n    max-width: 100%;\n  }\n\n  @media screen and ${device.xs} {\n    flex-direction: row;\n    max-height: 70vh;\n  }\n`\n\nconst Main = styled.main`\n  min-height: 100vh;\n  overflow: hidden;\n`\n\nconst AtroposWrapper = styled.section`\n  clip-path: polygon(0 0, 100% 0, 100% 100%, 50% 90%, 0 100%);\n  background-color: #140206;\n  height: auto;\n\n  @media screen and ${device.xs} {\n    clip-path: polygon(0 0, 100% 0, 100% 100%, 50% 97%, 0 100%);\n  }\n`\n\nconst GeckoImageWrapper = styled.figure`\n  height: 500px;\n  width: 500px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  @media screen and ${device.lg} {\n    img {\n      margin-top: -100px;\n    }\n  }\n\n  @media screen and ${device.xs} {\n    img {\n      margin-top: 10px;\n      margin-bottom: 10px;\n    }\n    width: 100%;\n    height: auto;\n  }\n`\n\nconst BoldBigText = styled.p`\n  font-size: 4rem;\n  font-family: 'Poppins-Bold';\n  text-transform: uppercase;\n  margin: 5px auto 0;\n  max-width: 80%;\n  text-align: center;\n  color: white;\n\n  @media screen and ${device.sm} {\n    font-size: 3rem;\n  }\n\n  @media screen and ${device.xs} {\n    margin-top: 2rem;\n    font-size: 2rem;\n    max-width: 90%;\n  }\n`\n\nconst RegularBigText = styled.p`\n  font-size: 2rem;\n  text-align: justify;\n  font-family: 'Poppins-Regular';\n  text-transform: uppercase;\n  margin: 5px auto 20px;\n  max-width: 80%;\n  color: #42413e;\n\n  @media screen and ${device.sm} {\n    font-size: 1.5rem;\n    margin-bottom: 5px;\n  }\n\n  @media screen and ${device.xs} {\n    margin-top: 2rem;\n    font-size: 1.5rem;\n    max-width: 90%;\n  }\n`\n\nconst BannerTop = styled.div`\n  width: 90%;\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-end;\n  flex-wrap: wrap;\n\n  @media screen and ${device.lg} {\n    width: 100%;\n    justify-content: center;\n    margin-top: 2rem;\n    margin-bottom: 4rem;\n  }\n\n  @media screen and ${device.xs} {\n    flex-direction: column-reverse;\n  }\n`\n\nconst BannerBottom = styled.div`\n  max-height: 10%;\n  width: 90%;\n  margin: 0 auto;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n  flex-wrap: wrap;\n\n  @media screen and ${device.sm} {\n    justify-content: center;\n    width: 100%;\n  }\n\n  @media screen and ${device.xs} {\n    height: 60%;\n    width: 100%;\n\n    img {\n      width: 100%;\n      height: auto;\n    }\n  }\n`\n\nconst GloriousLogo = () => (\n  <img\n    data-atropos-offset=\"-2\"\n    layout=\"fixed\"\n    src={BannerLogo}\n    alt=\"Cutest Gecko ever\"\n    width={620}\n    height={308}\n  />\n)\n\nconst Banner = () => {\n  return (\n    <AtroposWrapper>\n      <BannerWrapper>\n        <BoldBigText color=\"white\">Official Mint Site</BoldBigText>\n\n        <BannerBottom>\n          <GloriousLogo />\n          <GeckoImageWrapper>\n            <img\n              data-atropos-offset=\"1\"\n              layout=\"fixed\"\n              src={Gecko}\n              alt=\"Cutest Gecko ever\"\n              width={400}\n              height={351}\n            />\n          </GeckoImageWrapper>\n        </BannerBottom>\n      </BannerWrapper>\n    </AtroposWrapper>\n  )\n}\n\nexport default ({ children }) => {\n  return (\n    <React.Fragment>\n      <Main>\n        <Banner />\n        {children}\n      </Main>\n      <Footer />\n    </React.Fragment>\n  )\n}\n",["69","70"],"/Users/abraham/fun/gcksmint/src/geckomponents/Footer.js",[],{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":4,"column":8,"nodeType":"77","messageId":"78","endLine":4,"endColumn":13},{"ruleId":"75","severity":1,"message":"79","line":25,"column":27,"nodeType":"77","messageId":"78","endLine":25,"endColumn":38},{"ruleId":"80","severity":1,"message":"81","line":265,"column":15,"nodeType":"82","messageId":"83","endLine":265,"endColumn":17},{"ruleId":"80","severity":1,"message":"81","line":276,"column":15,"nodeType":"82","messageId":"83","endLine":276,"endColumn":17},{"ruleId":"84","severity":1,"message":"85","line":2,"column":18,"nodeType":"77","messageId":"78","endLine":2,"endColumn":21},{"ruleId":"84","severity":1,"message":"86","line":63,"column":7,"nodeType":"77","messageId":"78","endLine":63,"endColumn":10},{"ruleId":"84","severity":1,"message":"87","line":165,"column":7,"nodeType":"77","messageId":"78","endLine":165,"endColumn":21},{"ruleId":"84","severity":1,"message":"88","line":186,"column":7,"nodeType":"77","messageId":"78","endLine":186,"endColumn":16},{"ruleId":"89","severity":1,"message":"90","line":266,"column":1,"nodeType":"91","endLine":276,"endColumn":2},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},"no-native-reassign",["92"],"no-negated-in-lhs",["93"],"@typescript-eslint/no-unused-vars","'Paper' is defined but never used.","Identifier","unusedVar","'PhaseHeader' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'css' is defined but never used.","'Nav' is assigned a value but never used.","'RegularBigText' is assigned a value but never used.","'BannerTop' is assigned a value but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]